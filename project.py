# -*- coding: utf-8 -*-
"""Full_Study_guide.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1187U7W4hvnNQk8QiqY3LWpvH3h0mSr1c
"""

!pip install --upgrade gradio==5.25.0
!pip install cohere
!pip install pyairtable

import gradio as gr
import os

def create_study_guide(question, subject, mode):
  import requests
  import json
  import cohere


  # Replace with your Airtable API key and Base ID
  AirTable_API_KEY = "patiQteH23hnnMFIs.8b02070d644850a3a2e034952fa557baa811d64712bf420468b3b27782594790"
  BASE_ID = "app5pwH7nwBryVv1P"
  TABLE_ID = "Files"  # Table ID within your base

  # API Endpoint for retrieving records
  url = f"https://api.airtable.com/v0/{BASE_ID}/{TABLE_ID}"
  headers = {
      "Authorization": f"Bearer {AirTable_API_KEY}",
      "Content-Type": "application/json"
  }

  # Get all records in the table
  response = requests.get(url, headers=headers)
  response.raise_for_status()  # Raise an exception for bad status codes (e.g., 404)
  data = response.json()

  file_local = dict()

  for record in data["records"]:
      file_local[record["fields"]['file_names']] = record["fields"]['file_content']
  # Add the user query
  if mode == "questions":
    query = f"Can you answer this question for me, from my doc?-{question}"
  elif mode in ["flashcards"]:
    query = f"Can you generate 2 {mode} from my doc?"
  else:
    query = f"Can you generate a {mode} from my doc? Be moderately detailed"

  cohere_key = "HSeM7KVZwsyze6zmA5IPl1JysVm6jRbitqcSV5k3"
  co = cohere.ClientV2(
    cohere_key
  )  # Get your free API key here: https://dashboard.cohere.com/api-keys


  print(query)
  column_b = 'File_content'
  column_a = 'File_names'
  formula = f"?filterByFormula=%7B{column_a}%7D%3D%27{subject}%27"
  url = f"https://api.airtable.com/v0/{BASE_ID}/{TABLE_ID}{formula}"

  # Make the API request
  response = requests.get(url, headers=headers)

  if response.status_code == 200:
    records = response.json().get('records', [])

    if records:
        for record in records:
            fields = record.get('fields', {})
            documents = fields["file_content"]
            print(documents)

    else:
        documents = "No record found"
  else:
    print(f"Error: {response.status_code}")
    print(response.text)

  # Generate the response
  llm_response = co.chat(
    model="command-r-plus-08-2024",
    messages=[{"role": "user", "content": query}],
    documents=[documents],
  )

  # Display the response
  return llm_response.message.content[0].text



def add_row_to_table(file_name, file_content):
  from pyairtable import Api

  api = Api('patiQteH23hnnMFIs.8b02070d644850a3a2e034952fa557baa811d64712bf420468b3b27782594790')

  base = api.base('app5pwH7nwBryVv1P')
  table = base.table('Files')
  data = {
    "file_names": file_name,
    "file_content": file_content
    # Add more columns and values as needed
  }
  try:
    table.create(data)
    message = "Data successfully written to Airtable."
  except Exception as e:
    message = f"An error occurred: {e}"
  return message


def upload_file(file):
    """
    Function to handle file upload in Colab

    Args:
        file (file-like object): The uploaded file

    Returns:
        str: Path to the uploaded file
    """
    # Check if file is uploaded
    if file is None:
        return "No file uploaded"
    file_path = file.name
    file_name = file_path.split('/')[-1]
    with open(file_path, "rb") as f:
      file_contents = f.read()
    add_row_to_table(file_name, file_contents)


def create_app_with_sidebar():
    with gr.Blocks() as app:
        # Create the sidebar
        with gr.Row():
            # Sidebar on the left
            with gr.Column(scale=1) as sidebar:
                gr.Markdown("### Navigation")

                # Navigation buttons
                home_btn = gr.Button("Home")
                upload_btn = gr.Button("Upload File")
                create_btn = gr.Button("Create Study Guide")
                profile_btn = gr.Button("Profile")

                # Optional: add some styling
                gr.Markdown("---")
                gr.Markdown("### User")
                logout_btn = gr.Button("Logout")

            # Main content area on the right
            with gr.Column(scale=4):
                # Content containers - each representing a "page"
                with gr.Group(visible=True) as home_page:
                    gr.Markdown("# Home Page")
                    gr.Markdown("Welcome to the main dashboard.")
                    # Add home page content here

                with gr.Group(visible=False) as upload_page:
                    gr.Markdown("# Upload File")
                    # Replace with the file upload interface
                    file_input = gr.File(label="Upload your file")
                    output_text = gr.Textbox(label="Upload Status")
                    upload_button = gr.Button("Upload File")

                    # Connect the upload button to the upload_file function
                    upload_button.click(
                        fn=upload_file,
                        inputs=file_input,
                        outputs=output_text
                    )

                with gr.Group(visible=False) as create_page:
                    gr.Markdown("# Create Study Guide")
                    import requests
                    import json


                    # Replace with your Airtable API key and Base ID
                    AirTable_API_KEY = "patiQteH23hnnMFIs.8b02070d644850a3a2e034952fa557baa811d64712bf420468b3b27782594790"
                    BASE_ID = "app5pwH7nwBryVv1P"
                    TABLE_ID = "Files"  # Table ID within your base

                    # API Endpoint for retrieving records
                    url = f"https://api.airtable.com/v0/{BASE_ID}/{TABLE_ID}"
                    headers = {
                        "Authorization": f"Bearer {AirTable_API_KEY}",
                        "Content-Type": "application/json"
                    }

                    # Get all records in the table
                    response = requests.get(url, headers=headers)
                    response.raise_for_status()  # Raise an exception for bad status codes (e.g., 404)
                    data = response.json()

                    file_local = dict()

                    for record in data["records"]:
                        file_local[record["fields"]['file_names']] = record["fields"]['file_content']

                    # Add the custom interface components
                    text_input = gr.Textbox(label="Enter your text")
                    subject_dropdown = gr.Dropdown(
                        file_local.keys(), label="Subject"
                    )
                    mode_dropdown = gr.Dropdown(
                        ["questions", "flashcards", "study guide", "summary"], label="Mode"
                    )
                    output_text = gr.Textbox(label="Generated Content")
                    create_button = gr.Button("Generate")

                    # Connect the button to the greetwork function
                    create_button.click(
                        fn=create_study_guide,
                        inputs=[text_input, subject_dropdown, mode_dropdown],
                        outputs=[output_text]
                    )

                with gr.Group(visible=False) as profile_page:
                    gr.Markdown("# User Profile")
                    name = gr.Textbox(label="Name", value="User")
                    bio = gr.Textbox(label="Bio", lines=3)
                    update_btn = gr.Button("Update Profile")

        # Define navigation functions
        def show_home():
            return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False)

        def show_upload_file():
            return gr.update(visible=False), gr.update(visible=True), gr.update(visible=False), gr.update(visible=False)

        def show_create_study_guide():
            return gr.update(visible=False), gr.update(visible=False), gr.update(visible=True), gr.update(visible=False)

        def show_profile():
            return gr.update(visible=False), gr.update(visible=False), gr.update(visible=False), gr.update(visible=True)

        # Connect buttons to navigation functions
        home_btn.click(
            fn=show_home,
            outputs=[home_page, upload_page, create_page, profile_page]
        )

        upload_btn.click(
            fn=show_upload_file,
            outputs=[home_page, upload_page, create_page, profile_page]
        )

        create_btn.click(
            fn=show_create_study_guide,
            outputs=[home_page, upload_page, create_page, profile_page]
        )

        profile_btn.click(
            fn=show_profile,
            outputs=[home_page, upload_page, create_page, profile_page]
        )

        # Optional: Connect logout button
        def logout():
            # In a real app, you'd handle logout logic here
            return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False)

        logout_btn.click(
            fn=logout,
            outputs=[home_page, upload_page, create_page, profile_page]
        )

    return app

# Create and launch the app
demo = create_app_with_sidebar()
demo.launch()
